import { Request, Response } from 'express';
import { getRecords, getById } from '../utils/trino-util';

/**
 * List or find {{resourceName}} objects
 */
export async function list{{resourceName}}(req: Request, res: Response) {
  try {
    // Get query parameters
    const fields = req.query.fields as string | undefined;
    const offset = parseInt(req.query.offset as string || '0', 10);
    const limit = parseInt(req.query.limit as string || '100', 10);
    
    // Define columns to select based on fields parameter
    const columns = fields ? fields.split(',') : ['*'];

    // Get records from Trino
    const records = await getRecords<any>(
      '{{tableName}}',
      limit,
      offset
    );
    
    return res.status(200).json(records);
  } catch (error) {
    console.error(`Error in list{{resourceName}}:`, error);
    return res.status(500).json({
      message: 'Internal Server Error',
      details: process.env.NODE_ENV === 'production' ? undefined : (error as Error).message
    });
  }
}

/**
 * Retrieves a {{resourceName}} by ID
 */
export async function retrieve{{resourceName}}(req: Request, res: Response) {
  try {
    const id = req.params.id;
    const fields = req.query.fields as string | undefined;
    
    // Define columns to select based on fields parameter
    const columns = fields ? fields.split(',') : ['*'];

    // Get record by ID from Trino
    const record = await getById<any>(
      '{{tableName}}',
      id,
      'id' // Assuming 'id' is the ID column name
    );
    
    if (!record) {
      return res.status(404).json({
        message: `{{resourceName}} with ID ${id} not found`
      });
    }
    
    return res.status(200).json(record);
  } catch (error) {
    console.error(`Error in retrieve{{resourceName}}:`, error);
    return res.status(500).json({
      message: 'Internal Server Error',
      details: process.env.NODE_ENV === 'production' ? undefined : (error as Error).message
    });
  }
} 