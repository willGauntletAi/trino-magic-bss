import { Request, Response } from 'express';
import { getRecords, getById, processFieldSelection } from '../utils/trino-util';
import { addHrefLinks } from '../utils/api-utils';

/**
 * Parse query parameters and build a WHERE clause for filtering
 * @param queryParams Query parameters from the request
 * @returns WHERE clause string for SQL query
 */
function buildWhereClauseFromFilters(queryParams: Record<string, any>): string | undefined {
  // Skip special parameters that are not filters
  const nonFilterParams = ['fields', 'limit', 'offset'];
  
  // Get filter parameters (all params except for fields, limit, offset)
  const filterParams = Object.keys(queryParams).filter(param => !nonFilterParams.includes(param));
  
  if (filterParams.length === 0) {
    return undefined;
  }
  
  console.log(`[Filtering] Processing filter parameters: ${filterParams.join(', ')}`);
  
  // Build conditions for each filter
  const conditions: string[] = [];
  
  filterParams.forEach(param => {
    const value = queryParams[param];
    
    // Handle different operators
    if (param.includes('.')) {
      // Handle attribute paths (e.g., 'customer.name')
      const [baseName, operator] = param.split('.');
      
      if (operator === 'gt' || operator === 'gte' || operator === 'lt' || operator === 'lte' || operator === 'eq') {
        // Handle comparison operators
        const opMap: Record<string, string> = {
          'gt': '>',
          'gte': '>=',
          'lt': '<',
          'lte': '<=',
          'eq': '='
        };
        
        conditions.push(`"${baseName}" ${opMap[operator]} ${typeof value === 'string' ? `'${value}'` : value}`);
      } else if (operator === 'regex') {
        // Handle regex operator (simplified, as Trino may have different regex syntax)
        conditions.push(`REGEXP_LIKE("${baseName}", '${value}')`);
      } else {
        // Handle nested attribute path (e.g., 'customer.address.city')
        // Note: This assumes a JSON structure for nested fields
        conditions.push(`JSON_EXTRACT_SCALAR("${param.replace('.', '", "')}", '$') = '${value}'`);
      }
    } else {
      // Handle multiple values for the same parameter (OR condition)
      if (value.includes(',') || value.includes(';')) {
        // Split by comma or semicolon for OR conditions
        const orValues = value.split(/[,;]/);
        const orConditions = orValues.map(v => 
          `"${param}" = ${typeof v === 'string' ? `'${v.trim()}'` : v.trim()}`
        );
        conditions.push(`(${orConditions.join(' OR ')})`);
      } else {
        // Simple equality
        conditions.push(`"${param}" = ${typeof value === 'string' ? `'${value}'` : value}`);
      }
    }
  });
  
  // Join all conditions with AND
  const whereClause = conditions.join(' AND ');
  console.log(`[Filtering] Generated WHERE clause: ${whereClause}`);
  
  return whereClause;
}

{{#if isList}}
/**
 * {{summary}}
 */
export async function {{operationId}}(req: Request, res: Response) {
  // Log the complete request URL - using direct string to ensure it appears
  const fullUrl = `${req.protocol}://${req.get('host')}${req.originalUrl}`;
  console.log('========================');
  console.log(`REQUEST URL: ${fullUrl}`);
  console.log('========================');
  
  try {
    // Get query parameters
    const fields = req.query.fields as string | undefined;
    const offset = parseInt(req.query.offset as string || '0', 10);
    const limit = parseInt(req.query.limit as string || '100', 10);
    
    // Explicitly handle fields=none case
    let columns: string[];
    if (fields === 'none') {
      console.log('[Controller] Fields parameter is "none", will only return id column');
      columns = ['id'];
    } else {
      console.log(`[Controller] Processing fields parameter: ${fields}`);
      columns = fields ? fields.split(',') : ['*'];
    }
    
    // Build WHERE clause from filter parameters
    const whereClause = buildWhereClauseFromFilters(req.query);
    
    // Get records from Trino
    const records = await getRecords<any>(
      '{{tableName}}',
      limit,
      offset,
      whereClause, // Pass the generated where clause
      columns      // Pass the columns to select
    );
    
    // Add href links to the resources
    const baseUrl = `${req.protocol}://${req.get('host')}`;
    const resourcePath = '{{resourcePath}}'; // Use the provided resource path
    const resourcesWithHrefs = addHrefLinks(records, baseUrl, resourcePath);
    
    // Return the resources with href links
    return res.status(200).json(resourcesWithHrefs);
  } catch (error) {
    console.error(`Error in {{operationId}}:`, error);
    return res.status(500).json({
      message: 'Internal Server Error',
      details: process.env.NODE_ENV === 'production' ? undefined : (error as Error).message
    });
  }
}
{{else}}
/**
 * {{summary}}
 */
export async function {{operationId}}(req: Request, res: Response) {
  // Log the complete request URL - using direct string to ensure it appears
  const fullUrl = `${req.protocol}://${req.get('host')}${req.originalUrl}`;
  console.log('========================');
  console.log(`REQUEST URL: ${fullUrl}`);
  console.log('========================');
  
  try {
    const id = req.params.id;
    const fields = req.query.fields as string | undefined;
    
    // Explicitly handle fields=none case
    let columns: string[];
    if (fields === 'none') {
      console.log('[Controller] Fields parameter is "none", will only return id column');
      columns = ['id'];
    } else {
      console.log(`[Controller] Processing fields parameter: ${fields}`);
      columns = fields ? fields.split(',') : ['*'];
    }

    // Get record by ID from Trino
    const record = await getById<any>(
      '{{tableName}}',
      id,
      'id', // Assuming 'id' is the ID column name
      columns // Pass the columns to select
    );
    
    if (!record) {
      return res.status(404).json({
        message: `{{resourceName}} with ID ${id} not found`
      });
    }
    
    // Add href link to the resource
    const baseUrl = `${req.protocol}://${req.get('host')}`;
    const resourcePath = '{{resourcePath}}'; // Use the provided resource path
    const resourceWithHref = addHrefLinks(record, baseUrl, resourcePath);
    
    // Return the resource with href link
    return res.status(200).json(resourceWithHref);
  } catch (error) {
    console.error(`Error in {{operationId}}:`, error);
    return res.status(500).json({
      message: 'Internal Server Error',
      details: process.env.NODE_ENV === 'production' ? undefined : (error as Error).message
    });
  }
}
{{/if}} 