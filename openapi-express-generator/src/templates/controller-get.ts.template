import { Request, Response } from 'express';
import { getRecords, getById, processFieldSelection } from '../utils/trino-util';
import { addHrefLinks } from '../utils/api-utils';

{{#if isList}}
/**
 * {{summary}}
 */
export async function {{operationId}}(req: Request, res: Response) {
  // Log the complete request URL - using direct string to ensure it appears
  const fullUrl = `${req.protocol}://${req.get('host')}${req.originalUrl}`;
  console.log('========================');
  console.log(`REQUEST URL: ${fullUrl}`);
  console.log('========================');
  
  try {
    // Get query parameters
    const fields = req.query.fields as string | undefined;
    const offset = parseInt(req.query.offset as string || '0', 10);
    const limit = parseInt(req.query.limit as string || '100', 10);
    
    // Explicitly handle fields=none case
    let columns: string[];
    if (fields === 'none') {
      console.log('[Controller] Fields parameter is "none", will only return id column');
      columns = ['id'];
    } else {
      console.log(`[Controller] Processing fields parameter: ${fields}`);
      columns = fields ? fields.split(',') : ['*'];
    }
    
    // Get records from Trino
    const records = await getRecords<any>(
      '{{tableName}}',
      limit,
      offset,
      undefined, // No where clause
      columns    // Pass the columns to select
    );
    
    // Add href links to the resources
    const baseUrl = `${req.protocol}://${req.get('host')}`;
    const resourcePath = '{{resourcePath}}'; // Use the provided resource path
    const resourcesWithHrefs = addHrefLinks(records, baseUrl, resourcePath);
    
    // Return the resources with href links
    return res.status(200).json(resourcesWithHrefs);
  } catch (error) {
    console.error(`Error in {{operationId}}:`, error);
    return res.status(500).json({
      message: 'Internal Server Error',
      details: process.env.NODE_ENV === 'production' ? undefined : (error as Error).message
    });
  }
}
{{else}}
/**
 * {{summary}}
 */
export async function {{operationId}}(req: Request, res: Response) {
  // Log the complete request URL - using direct string to ensure it appears
  const fullUrl = `${req.protocol}://${req.get('host')}${req.originalUrl}`;
  console.log('========================');
  console.log(`REQUEST URL: ${fullUrl}`);
  console.log('========================');
  
  try {
    const id = req.params.id;
    const fields = req.query.fields as string | undefined;
    
    // Explicitly handle fields=none case
    let columns: string[];
    if (fields === 'none') {
      console.log('[Controller] Fields parameter is "none", will only return id column');
      columns = ['id'];
    } else {
      console.log(`[Controller] Processing fields parameter: ${fields}`);
      columns = fields ? fields.split(',') : ['*'];
    }

    // Get record by ID from Trino
    const record = await getById<any>(
      '{{tableName}}',
      id,
      'id', // Assuming 'id' is the ID column name
      columns // Pass the columns to select
    );
    
    if (!record) {
      return res.status(404).json({
        message: `{{resourceName}} with ID ${id} not found`
      });
    }
    
    // Add href link to the resource
    const baseUrl = `${req.protocol}://${req.get('host')}`;
    const resourcePath = '{{resourcePath}}'; // Use the provided resource path
    const resourceWithHref = addHrefLinks(record, baseUrl, resourcePath);
    
    // Return the resource with href link
    return res.status(200).json(resourceWithHref);
  } catch (error) {
    console.error(`Error in {{operationId}}:`, error);
    return res.status(500).json({
      message: 'Internal Server Error',
      details: process.env.NODE_ENV === 'production' ? undefined : (error as Error).message
    });
  }
}
{{/if}} 